name: ReleaseBuild

on:
  workflow_call:  # Reusable by other workflows
  workflow_dispatch:  # Manual trigger by user

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo to ./source
        uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 0  # Fetch all history for all branches and tags.

      - name: Checkout HL7/fhir-ig-history-template to ./history-template
        uses: actions/checkout@v4
        with:
          repository: HL7/fhir-ig-history-template
          path: history-template

      - name: Checkout WorldHealthOrganization/smart-html to ./webroot
        uses: actions/checkout@v4
        with:
          repository: WorldHealthOrganization/smart-html
          path: webroot
          fetch-depth: 0  # Fetch all history for all branches and tags.

      - name: Checkout FHIR/ig-registry to ./ig-registry
        uses: actions/checkout@v4
        with:
          repository: FHIR/ig-registry
          path: ig-registry

      - name: Setup publisher and install dependencies
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            npm install -g fsh-sushi &&
            curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./publisher.jar --create-dirs
          "

      - name: Create package cache folder
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            mkdir -p ./fhir-package-cache && chmod 777 ./fhir-package-cache
          "

      - name: Ensure write permissions for webroot and source directories
        run: |
          chmod -R 777 webroot
          chmod -R 777 source
          chmod -R 777 fhir-package-cache
          
      - name: Run the IG publisher
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest java -Xmx4g -jar ./publisher.jar publisher -ig source -package-cache-folder fhir-package-cache

      - name: Run publisher command for publishing release
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            ls -la /workspace/webroot &&
            java -Xmx4g -Dfile.encoding=UTF-8 -jar /workspace/publisher.jar -go-publish -package-cache-folder /workspace/fhir-package-cache -source /workspace/source -web /workspace/webroot -temp /workspace/temp -registry /workspace/ig-registry/fhir-ig-list.json -history /workspace/history-template -templates /workspace/webroot/templates
          "

      - name: Exclude files > 100MB from gh-pages and move to release-assets
        run: |
          mkdir -p ./release-assets
          # Move all files larger than 100 MB to release-assets
          find ./webroot/ -type f -size +100M -exec mv {} ./release-assets/ \;
          
          # Prepare the deploy folder, only with files â‰¤ 100MB
          mkdir -p ./deploy
          rsync -av --exclude-from=<(find ./webroot/ -type f -size +100M -printf "%P\n") ./webroot/ ./deploy/


      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          destination_dir: sitepreview


      - name: Upload release assets ( package.tgz)
        run: |
          mkdir -p ./release-assets
          mv ./source/output/package.tgz ./release-assets/


      - name: Upload updated fhir-ig-list.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: fhir-ig-list.json
          path: ig-registry/fhir-ig-list.json

      - name: Upload updated fhir-ig-list.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-feeds.json
          path: ig-registry/package-feeds.json


#      - name: Upload package.tgz to release
#        uses: actions/upload-release-asset@v1
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ./release-assets/package.tgz
#          asset_name: package.tgz
#          asset_content_type: application/gzip

#      # Configure Git before committing changes
#      - name: Configure Git
#        run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "GitHub Actions Bot"

#      # Use SSH or HTTPS with the user's credentials if available
#      - name: Create new branch and update content in WorldHealthOrganization/smart-html
#        run: |
#          cd webroot
#          git checkout main
#          git checkout -b "${{ github.repository }}-${{ github.run_id }}"  # Create a branch using the calling repo name
#          rsync -av --exclude='.git/' --delete ../deploy/ ./  # Sync the deploy directory to the webroot
#          git add .
#          git commit -m "Update site content from repo ${{ github.repository }}"
#          git push --set-upstream origin "${{ github.repository }}-${{ github.run_id }}"
#
#      # Create a pull request to merge changes into the main branch
#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}  # Reuse default GitHub token
#          commit-message: "Update site content from repo ${{ github.repository }}"
#          title: "Update site content from repo ${{ github.repository }}"
#          body: "This is an automated pull request to update the site content from ${{ github.repository }}"
#          head: "${{ github.repository }}-${{ github.run_id }}"
#          base: main
#          delete-branch: true
