name: ReleaseBuild

on:
  workflow_call: # Reusable by other workflows
    inputs:
      branch:
        description: "Branch to checkout"
        required: false
        default: ""  # Empty string by default, meaning no branch specified
        
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo to ./source
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch != '' && inputs.branch || github.event.repository.default_branch }}  # Use the branch if provided, otherwise default to the default branch
          fetch-depth: 0  # Fetch all history for all branches and tags.

      - name: Checkout HL7/fhir-ig-history-template to ./history-template
        uses: actions/checkout@v2
        with:
          repository: HL7/fhir-ig-history-template
          path: history-template

      - name: Checkout WorldHealthOrganization/smart-html to ./webroot
        uses: actions/checkout@v2
        with:
          repository: WorldHealthOrganization/smart-html
          path: webroot
          fetch-depth: 0  # Fetch all history for all branches and tags.

      - name: Checkout FHIR/ig-registry to ./ig-registry
        uses: actions/checkout@v2
        with:
          repository: FHIR/ig-registry
          path: ig-registry

      - name: Setup publisher and install dependencies
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            npm install -g fsh-sushi &&
            curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./publisher.jar --create-dirs
          "

      - name: Create package cache folder
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache
          "

      - name: Ensure write permissions for webroot and source directories
        run: |
          chmod -R 777 webroot
          chmod -R 777 source
          chmod -R 777 fhir-package-cache
          
      - name: Run the IG publisher
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest java -Xmx4g -jar ./publisher.jar publisher -ig source -package-cache-folder fhir-package-cache

#      - name: For debug: List contents of webroot before publishing release
#        run: ls -la webroot
#
#      - name: For debug: Print working directory inside Docker before publishing release
#        run: |
#          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
#            pwd &&
#            ls -la
#          "

      - name: Run publisher command for publishing release
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace hl7fhir/ig-publisher-base:latest /bin/sh -c "
            ls -la /workspace/webroot &&
            java -Xmx4g -Dfile.encoding=UTF-8 -jar /workspace/publisher.jar -go-publish -package-cache-folder /workspace/fhir-package-cache -source /workspace/source -web /workspace/webroot -temp /workspace/temp -registry /workspace/ig-registry/fhir-ig-list.json -history /workspace/history-template -templates /workspace/webroot/templates
          "

      - name: Install rsync and prepare deployment folder
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace ubuntu:latest /bin/bash -c "
            apt-get update && apt-get install -y rsync &&
            mkdir /workspace/deploy &&
            rsync -av --exclude='ig-build-zips/*' /workspace/webroot/ /workspace/deploy/
          "

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          destination_dir: sitepreview


#      - name: Update WHO repository and create a new branch
#        run: |
#          pwd  # Print the current working directory for debugging
#          cd ./webroot
#          pwd  # Print the working directory after changing to webroot
#          ls -la  # List the contents of the current directory to check for .git
#          git status  # This will help confirm if you're in a Git repository
#          git fetch --all
#          if git branch -r | grep -qw "origin/gh-pages"; then
#            git checkout gh-pages
#          else
#            git checkout -b gh-pages
#          fi
#          git checkout -b "update-site-content-${{ github.run_id }}"
#          rsync -av  --exclude='.git/' --delete ../deploy/ ./
#          git add .
#          git status  # Check the status to ensure changes are staged
#          git commit -m "Update site content"
#          git push --set-upstream origin "update-site-content-${{ github.run_id }}"

#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v3
#        with:
#          delete-branch: true
#          token: ${{ secrets.GITHUB_TOKEN }}
#          commit-message: Update site content
#          title: "Update site content"
#          body: "This is an automated pull request to update the site content"
#          branch: "update-site-content-${{ github.run_id }}"
#          base: gh-pages
#          head: "update-site-content-${{ github.run_id }}"
#          repository: WorldHealthOrganization/smart-html

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: true
#          prerelease: true
#
#      - name: Upload Release Assets
#        run: |
#          for file in ./webroot/ig-build-zips/*; do
#            echo "Uploading file: $file"
#            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: $(file -b --mime-type $file)" --data-binary @$file "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)"
#          done
